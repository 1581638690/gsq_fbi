#LastModifyDate:　2024-06-17T11:48:49    Author:   rzc
#LastModifyDate:　2024-06-17T10:28:36    Author:   rzc
#LastModifyDate:　2024-06-17T10:27:58    Author:   rzc
#xlink脚本
#file: aopera_monitoring.xlk
#name: 操作行为日志监控
#描述： 根据用户操作行为进行日志监控行为
#创建时间: 2024-06-17T10:21:51.601653

#查看流计算服务
#a = @udf FBI.x_finder3_list

#启动
#a = @udf FBI.x_finder3_start with aopera_monitoring

#停止
#a = @udf FBI.x_finder3_stop with aopera_monitoring

#查询错误日志
#a = load ssdb by ssdb0 query qrange,X_log:aopera_monitoring,0,1000

#查看xlink内部信息, 每５秒更新
#在对象查看器里输入　printf::aopera_monitoring

#断点调试
#debug_on(1)


#初始化
init => {
	stream["meta_name"] = "操作行为日志监控"
	stream["meta_desc"] = "根据用户操作行为进行日志监控行为"
	stream["source"]= {"unix_udp":"/tmp/monitor_opera"}
	
	#stream["stw"]["stw_flow"]={"times":60,"fun":"flow"}
	#stream["stw"]["stw_http"]={"times":60,"fun":"http"}
	#stream["st"]["st_10s"]={"times":10,"fun":"print10"}

	
	
	#创建ckh的pool
	pools["ckh"] = []

}


#事件处理函数
events => {
	# mon = {}
	timestamp = o.get("time")
	# 提取年月日
	date_part = times.date()
	date_str = date_part.strftime("%Y-%m-%d")
	# 提取时分
	time_part = times.time()
	time_srt = time_part.strftime("%H-%M")
	
	appName = o.get("app_name")
	userName = o.get("account")
	interface =o.get("name")
	type = o.get("action")
	mon = {"time":time_str,"year":date_str,"type":type,"userName":userName,"appName":appName,"interface":interface}
}

#系统定时函数
print10 => {
	printf("总数","%s==sum==%d"%(st,stream["count"]))
	printf("10秒统计数","%s==10===%d"%(st,stream["count-10"]))
	stream["count-10"] = 0
	
	#数据存储到ckh的flow表中
	store_ckh(pools["ckh"],"flow") 

	#调用FBI块语句
	push_arrays_to_df(table,"flow")
	save()
}

#窗口函数，使用FBI的原语
flow => stw{

	df2 = group df by dest_ip agg count
	df3 = @udf df by udf0.df_sum
	store df2 to ssdb by ssdb0 with DF:agg=>@k
    store df3 to ssdb by ssdb0 with DF:sum=>@k    
    @udf flow by CRUD.save_table with (msyql,df)
	assert df by df.index.size >0 as xlink to 调度成功[df.index.size] with 调度失败!
}

#窗口函数，使用FBI的原语
http => stw{
	df2 = group df by dest_ip agg count
	df3 = @udf df by udf0.df_sum
	store df2 to ssdb by ssdb0 with DF:agg=>@k
    store df3 to ssdb by ssdb0 with DF:sum=>@k
	t2 = @sdf format_timestamp with (@k,"%Y-%m-%dT%H:%M:%S")
	#调试语句
	assert True as xlink to 调度成功[$t2] with 调度失败!
}

#自定义批处理函数，使用FBI语句块, 可以在系统定时函数中调用
#使用push_arrays_to_df函数生成df,在语句块中使用
#如: push_arrays_to_df(table,"flow")
save => fbi{
	@udf flow by CRUD.save_table with (msyql,flow_info)
	drop flow
}

#自定义python函数，必须有参数,可以在初始化函数，事件处理函数，和定时函数中使用
ss => (d1,d2,d3){
	return d1+d2+d3
}


#克隆一个新事件,创建一个新的变量，并返回
clone_event =>(o){
	e={}
	e["timestamp"]= o["timestamp"]
	e["src_ip"]= o["src_ip"]
	e["dest_ip"]= o["dest_ip"]
	e["dest_port"]= o["dest_port"]
	return e
}

#base64字符串的解码,处理被截断的情况
base64_decode =>(x){
	try:
		a =  base64.b64decode(x).decode("utf-8")
	except Exception as e:
		a = base64.b64decode(x)[0:e.start].decode("utf-8")
	return a
}

#需要额外引入的包
imports =>{
	import sys
	import gc
	import base64
}
