#LastModifyDate:　2024-05-15T11:24:46    Author:   rzc
#LastModifyDate:　2024-05-14T17:09:00    Author:   rzc
#LastModifyDate:　2024-05-14T17:07:50    Author:   rzc
#LastModifyDate:　2024-05-14T17:04:25    Author:   rzc
#LastModifyDate:　2024-05-14T17:03:38    Author:   rzc
init => {
	stream["meta_name"] = "对API接口数据进行分析"
	stream["meta_desc"] = "分析API接口数据，账户做了什么操作行为"
	stream["source"]= {"unix_udp":"/tmp/operation_events_new"}
	

	#自定义的统计变量
	stream["count"] = 0
	stream["count-10"] = 0
	stream["st"]["st_30f"]={"times":30,"fun":"print30"}
	stream["st"]["st_10f"]={"times":10,"fun":"print10"}
	#chk的链接
	stream["CKH"] = CKH_Client(host="127.0.0.1",port=19000,user="default",password="client")
	
	#创建ckh的pool
	pool["event_model"] = []

	stream["con_rules"] = load_model_data("newevent")
}


#事件处理函数
events => {
	stream["count"]+=1
	ify_result = read_model_identify(stream["con_rules"],o)
	
	event = "访问"
	# 获取当前接口的名称 如果没有，就按照现在的，如果存在就进行覆盖
	url_name=o.get("name","")
	# 现在已知存在操作 和返回结果两种行为了，默认
	ret_res = {}
	if ify_result and isinstance(ify_result,dict):
		# 获取当前接口的名称 如果没有，就按照现在的，如果存在就进行覆盖
		label_name = ify_result.get("label_info",{}).get("name","")
		if url_name =="" and label_name:
			url_name = label_name[0]
		else:
			url_name = url_name 
		data_event = ify_result.get("data",{}) # 存在操作事件
		
		if data_event:
			# 获取事件信息,做一个列表 对事件信息进行处理
			event = {}
			for http_pos,action_name_value in data_event.items():
				for action,name_value in action_name_value.items():
					for name,value in name_value.items():
						if action == "操作":
							event.setdefault(name,value)
						elif action == "返回结果":
							ret_res.setdefault(name,value)
						
			event = ujson.dumps(event,ensure_ascii=False)
			ret_res= ujson.dumps(ret_res,ensure_ascii=False)
		
		# 需要进行 存储数据信息
		
		
	if url_name!="":
		event_dic = {"url":o.get("url"),"time":iso_to_datetime(o["time"]),"cookie":o.get("cookie"),"flow_id":o.get("flow_id",""),"app":o.get("app"),"account":o.get("account"),"name":url_name,"parameter":o.get("parameter"),"app_name":o.get("app_name"),"id":o.get("id"),"dstip":o.get("dstip"),"user_info": o.get("user_info"),"event":event,"request_body":o.get("request_body",""),"response_body":o.get("response_body",""),"res":ret_res}
		#if "e_opera" not in stream:
		#	stream["e_opera"] =list(event_dic.keys())
		#to_pool("event_model",list(event_dic.values()))
			
}

#系统定时函数
print10 => {
	printf("总数","%s==sum==%d"%(st,stream["count"]))
	printf("10秒统计数","%s==10===%d"%(st,stream["count-10"]))
	
}
print30 => {
	stream["con_rules"] = load_model_data("newevent")
	#if "e_opera" in stream:
	#	store_ckh2(pool["event_model"],"event_monitor",stream["e_opera"])
	#store_ckh(pool["event_model"],"event_monitor")
}


#需要额外引入的包
imports =>{
	import sys
	import gc
	import base64
	from model_information import *
	from intell_analy_new import load_model_data
}