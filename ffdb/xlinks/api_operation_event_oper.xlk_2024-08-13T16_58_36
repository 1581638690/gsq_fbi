#LastModifyDate:　2024-08-13T16:58:36    Author:   rzc
#LastModifyDate:　2024-08-13T16:46:09    Author:   rzc
#LastModifyDate:　2024-08-13T10:39:37    Author:   rzc
#LastModifyDate:　2024-08-09T14:50:04    Author:   rzc
#LastModifyDate:　2024-08-09T14:38:16    Author:   rzc
#LastModifyDate:　2024-08-08T17:30:54    Author:   rzc
#LastModifyDate:　2024-08-08T17:28:39    Author:   rzc
#LastModifyDate:　2024-08-08T17:26:46    Author:   rzc
#LastModifyDate:　2024-08-08T17:24:56    Author:   rzc
#LastModifyDate:　2024-08-08T17:12:36    Author:   rzc
#LastModifyDate:　2024-08-08T14:50:48    Author:   rzc
init => {
	stream["meta_name"] = "对API接口数据进行分析"
	stream["meta_desc"] = "分析API接口数据，账户做了什么操作行为"
	stream["source"]= {"unix_udp":"/tmp/operation_events_oper"}
	

	#自定义的统计变量
	stream["count"] = 0
	stream["count-10"] = 0
	stream["st"]["st_30f"]={"times":30,"fun":"print30"}
	stream["st"]["st_10f"]={"times":10,"fun":"print10"}
	#chk的链接
	stream["CKH"] = CKH_Client(host="127.0.0.1",port=19000,user="default",password="client")
	
	#创建ckh的pool
	pool["event_model"] = []

	stream["con_rules"] = load_model_data("operevent")
	try:
		with open("/data/xlink/models_paths/table_dic.pkl","rb")as fp:
			stream["table_dic"] = pickle.load(fp)
	except:
		stream["table_dic"] = {}
	stream["action_dict"] ={}
	stream["gjxz"]={"预警主题类型":{"":"全部","0":"企业","1":"事件","2":"人员"},"反馈状态":{"":"全部","0":"未反馈","1":"已反馈"}}
	stream["url_list"] =  [
		"/hsdsh/peopleEnterprise/getEnterpriseBidding",
		"/hsdsh/peopleEnterprise/getPersonMaritalStatus",
		"/hsdsh/peopleEnterprise/getPersonEducationData",
		"/hsdsh/peopleEnterprise/getPersonMarriageInfo",
		"/hsdsh/peopleEnterprise/getPersonSocialInfo",
		"/hsdsh/peopleEnterprise/getPersonAccumulationFund",
		"/hsdsh/peopleEnterprise/getVehicleTrafficRecords",
		"/hsdsh/peopleEnterprise/getAccessControlRecords"
		]
}


#事件处理函数
events => {
	
	# 获取当前的信息
	url =o.get("url")
	url_parts = url.split("//",1)[1]
	url = "/" + url_parts.split("/",1)[1]
	#printf("url",url)
	parameter = o.get("parameter")
	timestamp = o.get("time")
	o["url"]=url
	request_body_json = o.get("request_body_json")
	
	o["parameter"] = par_value_match(url,parameter)
	o["request_body_json"] = request_value_match(url,request_body_json)
	response_body = o.get("response_body","")
	session_id = o.get("session_id")
	#stream["count"]+=1
	ify_result = read_model_identify(stream["con_rules"],o)
	printf("res",ify_result)
	status_msg = ""
	action_name = "访问"
	subName =""
	url_type = ""
	parameter_json = o["parameter_json"]
	# 获取当前接口的名称 如果没有，就按照现在的，如果存在就进行覆盖
	if "orgUuid" in o["parameter_json"]:
		url_name = "数据目录-目录管理"
	else:
		url_name=o.get("name","")
	
	# 获取当前应用的名称，如果不存在，就按照模型生成的，如果存在就不使用模型的
	uapp_name= o.get("app_name","")
	# 现在已知存在操作 和返回结果两种行为了，默认
	ret_res = {}
	event = {}
	label_info_dict = {}
	if ify_result and isinstance(ify_result,dict):
		# 获取当前接口的名称 如果没有，就按照现在的，如果存在就进行覆盖
		label_info_dict = ify_result.get("label_info",{})
		
		label_name = label_info_dict.get("name","")
		if url_name =="" and label_name:
			url_name = label_name
		else:
			url_name = url_name 
		app_name = label_info_dict.get("app_name","")
		if uapp_name == "" and app_name:
			uapp_name = app_name
		else:
			uapp_name = uapp_name
		actions = label_info_dict.get("操作事件","")
		if not actions:
			action_name = action_name
		else:
			action_name = actions
		url_name = QueryApiName(url_name,label_info_dict,parameter,parameter_json)
		printf("url_name",url_name)
		# add rzc 6/4
		url_type =label_info_dict.get("操作类型","")
		data_event = ify_result.get("data",{}) # 存在操作事件
		
		
		if data_event:
			# 获取事件信息,做一个列表 对事件信息进行处理
			event,ret_res,status_msg,subName = data_event_oper(data_event,subName,event,ret_res,label_info_dict,status_msg)
								
		#printf("events",event)
		
	#event = ujson.dumps(event,ensure_ascii=False)
	#ret_res= ujson.dumps(ret_res,ensure_ascii=False)
		
		# 需要进行 存储数据信息
	
	#printf("dic",label_info_dict)
	#printf("event",event)
	if "/hsdsh/collectionLibrary/getCollectionLibraryByType" == url and parameter == "typeName=机关事业单位&depName=":
		event = {}
		ret_res = {}
		status_msg=""
	if status_msg!="":
		
		event_dic = {"url":url,"time":iso_to_datetime(o["time"]),"cookie":o.get("cookie"),"flow_id":o.get("flow_id",""),"app":o.get("app"),"account":o.get("account"),"name":url_name,"parameter":o.get("parameter"),"app_name":uapp_name,"id":o.get("id"),"dstip":o.get("dstip"),"user_info": o.get("user_info"),"event":event,"request_body":o.get("request_body",""),"response_body":o.get("response_body",""),"res":ret_res,"action":action_name,"status_msg":status_msg}
		#printf("event_dic",event_dic)
		# 行为链条动作获取
		interface_url= "/hsdsh/es/searchForHitList"
		move_interface ={"search":"/hsdsh/es/search","YjxxList":"/hsdsh/pcip/risen/yjxx/getYjxxList"}
		#s = deepcopy(event_dic)
		event_dic["subName"] = subName
		# 根据埋点接口获取历史数据
		event_dic,founds_url = associat_action.retrieve_forward(stream["action_dict"],event_dic,session_id,interface_url)
		# 存储行为链条数据信息
		stream["action_dict"],founds = associat_action.session_action_relation(session_id,interface_url,stream["action_dict"],event_dic,url_type,stream["url_list"],move_interface)
		printf("action_dict",stream["action_dict"])
		#printf("founds",founds)
		
		if founds:
			
			if "日志状态" not in label_info_dict or  ("日志状态" in label_info_dict and event):
				del event_dic["subName"]
				event_dic["res"] = ujson.dumps(event_dic["res"],ensure_ascii=False)
				event_dic["event"] = ujson.dumps(event_dic["event"],ensure_ascii=False)
				if isinstance(event_dic["request_body"],dict):
					event_dic["request_body"] = ujson.dumps(event_dic["request_body"],ensure_ascii=False)
				if isinstance(event_dic["response_body"],dict):
					event_dic["response_body"] = ujson.dumps(event_dic["response_body"],ensure_ascii=False)

				if "e_operas" not in stream:
					stream["e_operas"] =list(event_dic.keys())
				to_pool("event_model",list(event_dic.values()))
			#event_dic["time"] = timestamp
			#to_unix_udp(event_dic,"/tmp/monitor_opera")
}

#系统定时函数
print10 => {
	printf("总数","%s==sum==%d"%(st,stream["count"]))
	printf("10秒统计数","%s==10===%d"%(st,stream["count-10"]))
	
}
print30 => {
	stream["con_rules"] = load_model_data("operevent")
	if "e_operas" in stream:
		store_ckh2(pool["event_model"],"event_monitor_oper",stream["e_operas"])
	
	#with open("/data/xlink/models_paths/table_dic_bak.pkl","wb") as fp:
		#pickle.dump(stream["table_dic"],fp)
		
	# 移动到原来的文件中
	
	#os.replace("/data/xlink/models_paths/table_dic_bak.pkl","/data/xlink/models_paths/table_dic.pkl")
	
	try:
		with open("/data/xlink/models_paths/table_dic.pkl","rb")as fp:
			stream["table_dic"] = pickle.load(fp)
	except:
		time.sleep(4)
		with open("/data/xlink/models_paths/table_dic.pkl","rb")as fp:
			stream["table_dic"] = pickle.load(fp)
}
data_event_oper =>(data_event,subName,event,ret_res,label_info_dict,status_msg){
	for http_pos,action_name_value in data_event.items():
		for action,name_value in action_name_value.items():
			for name,value in name_value.items():
				value_lst=[]
				if action == "操作":
					if name == "教育类型":
						value_res = value[0]
						if value_res in label_info_dict:
							# 获取到类型分类
							subName =label_info_dict.get(value_res,"")
					elif name == "序号":
						value_res = value[0]
						if value_res == -1:
							pass
							#del name_value["序号"]
						else:
							value_lst.append(value_res)
							event.setdefault(name,value_lst)
					else:
						# 判断值是否存在与标签之中，若存在则将值写成标签值得内容
						event=label_data(value_lst,value,label_info_dict,event,name)

				elif action == "返回结果":
					if name == "执行状态":
						# 获取到执行结果
						value_res = value[0]
						if value_res ==  "true" or value_res == True:
							status_msg = "请求成功"
						elif value_res == "false" or value_res == False:
							
							status_msg = "请求失败"
						else:
							status_msg = value_res
					else:
						ret_res=label_data(value_lst,value,label_info_dict,ret_res,name)
	return event,ret_res,status_msg,subName
}
par_value_match =>(url,parameter){
	if  "/hsdsh/pcip/risen/yjxx/getYjxxList" in url:
		list_yj = []
		par_lst = parameter.split("&")
		for par in par_lst:
			key,value = par.split("=")
			
			if key=="page":
				if len(value)>1:
					page_num =int(value[:-1])+1
					list_yj.append(f"{key}={page_num}")
				else:
					list_yj.append(par)
			elif key == "yjxxWarningType":
				value_dic = stream["gjxz"].get("预警主题类型")
				values = value_dic.get(value)
				list_yj.append(f"{key}={values}")
			elif key == "yjxxFeedbackStatus":
				value_dic = stream["gjxz"].get("反馈状态")
				values = value_dic.get(value)
				list_yj.append(f"{key}={values}")
			else:
				list_yj.append(par)
		return "&".join(list_yj)
	return parameter
}
request_value_match =>(url,request_body_json){
	# 获取表单数据
	if url == "/dataasset/risen/rb/data/directory/showRbDataDirectory":
		start = request_body_json.get("start","")
		if len(start)>1:
			page_num =int(start[:-1])+1
		else:
			page_num = int(start) +1
		request_body_json["start"] = page_num
		return request_body_json
	return request_body_json
}
label_data =>(value_lst,value,label_info_dict,event,name){
	for v in value:
		if isinstance(v,str):
			v=v.replace("<span style='color: #e79a46'>","")
			v = v.replace("</span>","")
		founds = False
		if v is True:
			v ="true"
		elif v is False:
			v="false"
		if isinstance(v,list) or isinstance(v,dict):
			value_lst.append(v)
			continue
		for id,table_value in stream["table_dic"].items():
			table_comment = table_value.get("tableComment")
			table_name = table_value.get("tableName")
			if v == table_name or (name=="表id名称" and v ==id):
				# 如果值等于表名称，就将中文名称赋值为v
				v = table_comment
				value_lst.append(v)
				founds = True
				break
		# 循环值信息，如果值 存在与标签信息中
		if v in label_info_dict and not founds:#如果值存在于字典之中，那么这个字典中的值是列表，就需要将数据取出来
			label_value = label_info_dict.get(v,"") # 获取到标签的值
			if label_value:
				value_lst.append(label_value)
		else:
				# 如果不存在的话 就存入新的值
			value_lst.append(v)
	if value_lst:
		value_lst = remove_duplicates(value_lst)
		if value_lst!=[]:
			event.setdefault(name,value_lst)
	return event
}
remove_duplicates =>(mixed_array){
	
	result=[]
	for item in mixed_array:
		if item not in result and item!=[]:
			result.append(item)
	return result
}
QueryApiName =>(url_name,label_info,parameter,parameter_json=None){
	if "参数分类" not in label_info:
		return url_name
	par_name = label_info.get("参数分类","")
	keyword,cls = par_name.split(">>")
	key_true,key_false = cls.split("/")
	target = parameter_json or parameter
	result = key_true if target and keyword in target else key_false
	
	if url_name:
		url_name += f"-{result}"
	else:
		url_name = result
	return url_name
	
}
table_common =>(url,response_body,table_dic){
	if url == "http://10.18.95.82:8000/hsdsh/original/getOriginalTable":
		response_body = ujson.loads(response_body)
		data = response_body.get("data",[])
		if data:
			for item in data:
				system = item.get("system","")
				tableName = item.get("tableName","")
				tableComment = item.get("tableComment","")
				id = str(item.get("id"))
				topics =item.get("topic","")
				table_dic.setdefault(id,{}).setdefault("topic",topics)
				table_dic.setdefault(id,{}).setdefault("tableName",tableName)
				table_dic.setdefault(id,{}).setdefault("tableComment",tableComment)
				table_dic.setdefault(id,{}).setdefault("system",system)
	return table_dic
}
#需要额外引入的包
imports =>{
	import sys
	import gc
	import base64
	#from model_information import *
	from intell_analy_new import *
	import pickle
	import os
	import time
	import associat_action
	from copy import deepcopy
}