#LastModifyDate:　2024-05-23T11:43:38    Author:   rzc
#LastModifyDate:　2024-05-23T11:32:12    Author:   rzc
#LastModifyDate:　2024-05-23T11:29:55    Author:   rzc
#LastModifyDate:　2024-05-23T11:20:50    Author:   rzc
#LastModifyDate:　2024-05-23T11:17:52    Author:   rzc
#LastModifyDate:　2024-05-23T11:16:20    Author:   rzc
#LastModifyDate:　2024-05-23T10:42:09    Author:   rzc
#LastModifyDate:　2024-05-23T10:39:32    Author:   rzc
#LastModifyDate:　2024-05-23T10:35:33    Author:   rzc
#LastModifyDate:　2024-05-23T10:31:38    Author:   rzc
#LastModifyDate:　2024-05-22T15:48:51    Author:   rzc
init => {
	stream["meta_name"] = "对API接口数据进行分析"
	stream["meta_desc"] = "分析API接口数据，账户做了什么操作行为"
	stream["source"]= {"unix_udp":"/tmp/operation_events_new"}
	

	#自定义的统计变量
	stream["count"] = 0
	stream["count-10"] = 0
	stream["st"]["st_30f"]={"times":30,"fun":"print30"}
	stream["st"]["st_10f"]={"times":10,"fun":"print10"}
	#chk的链接
	stream["CKH"] = CKH_Client(host="127.0.0.1",port=19000,user="default",password="client")
	
	#创建ckh的pool
	pool["event_model"] = []

	stream["con_rules"] = load_model_data("newevent")
	try:
		with open("/data/xlink/models_paths/table_dic.pkl","rb")as fp:
			stream["table_dic"] = pickle.load(fp)
	except:
		stream["table_dic"] = {}
}


#事件处理函数
events => {
	# 获取当前的信息
	url =o.get("url")
	response_body = o.get("response_body","")
	stream["table_dic"]= table_common(url,response_body,stream["table_dic"])
	#printf("tabsss",tableres)
	stream["count"]+=1
	ify_result = read_model_identify(stream["con_rules"],o)
	printf("ifys",ify_result)
	status_msg = ""
	action_name = "访问"
	# 获取当前接口的名称 如果没有，就按照现在的，如果存在就进行覆盖
	url_name=o.get("name","")
	# 现在已知存在操作 和返回结果两种行为了，默认
	ret_res = {}
	event = {}
	if ify_result and isinstance(ify_result,dict):
		# 获取当前接口的名称 如果没有，就按照现在的，如果存在就进行覆盖
		label_info_dict = ify_result.get("label_info",{})
		label_name = label_info_dict.get("name","")
		if url_name =="" and label_name:
			url_name = label_name
		else:
			url_name = url_name 
		action_name = label_info_dict.get("操作事件","")
		
		data_event = ify_result.get("data",{}) # 存在操作事件
		printf("datas",data_event)
		if data_event:
			# 获取事件信息,做一个列表 对事件信息进行处理
			for http_pos,action_name_value in data_event.items():
				for action,name_value in action_name_value.items():
					for name,value in name_value.items():
						value_lst=[]
						if action == "操作":
							# 判断值是否存在与标签之中，若存在则将值写成标签值得内容
							event=label_data(value_lst,value,label_info_dict,event,name)
							
						elif action == "返回结果":
							if name == "执行状态":
								# 获取到执行结果
								value_res = value[0]
								if value_res ==  "true" or True:
									status_msg = "请求成功"
								elif value_res == "false" or False:
									status_msg = "请求失败"
								else:
									status_msg = value_res
							else:
								ret_res=label_data(value_lst,value,label_info_dict,ret_res,name)
								
								
						
	event = ujson.dumps(event,ensure_ascii=False)
	ret_res= ujson.dumps(ret_res,ensure_ascii=False)
		
		# 需要进行 存储数据信息
		
		
	if url_name!="":
		event_dic = {"url":url,"time":iso_to_datetime(o["time"]),"cookie":o.get("cookie"),"flow_id":o.get("flow_id",""),"app":o.get("app"),"account":o.get("account"),"name":url_name,"parameter":o.get("parameter"),"app_name":o.get("app_name"),"id":o.get("id"),"dstip":o.get("dstip"),"user_info": o.get("user_info"),"event":event,"request_body":o.get("request_body",""),"response_body":o.get("response_body",""),"res":ret_res,"action":action_name,"status_msg":status_msg}
		#printf("event_dic",event_dic)
		if "e_operas" not in stream:
			stream["e_operas"] =list(event_dic.keys())
		to_pool("event_model",list(event_dic.values()))
			
}

#系统定时函数
print10 => {
	printf("总数","%s==sum==%d"%(st,stream["count"]))
	printf("10秒统计数","%s==10===%d"%(st,stream["count-10"]))
	
}
print30 => {
	stream["con_rules"] = load_model_data("newevent")
	if "e_operas" in stream:
		store_ckh2(pool["event_model"],"event_monitor_new",stream["e_operas"])
	
	with open("/data/xlink/models_paths/table_dic_bak.pkl","wb") as fp:
		pickle.dump(stream["table_dic"],fp)
		
	# 移动到原来的文件中
	
	os.replace("/data/xlink/models_paths/table_dic_bak.pkl","/data/xlink/models_paths/table_dic.pkl")
	
	try:
		with open("/data/xlink/models_paths/table_dic.pkl","rb")as fp:
			stream["table_dic"] = pickle.load(fp)
	except:
		time.sleep(4)
		with open("/data/xlink/models_paths/table_dic.pkl","rb")as fp:
			stream["table_dic"] = pickle.load(fp)
}
label_data =>(value_lst,value,label_info_dict,event,name){
	for v in value:
		founds = False
		if v is True:
			v ="true"
		elif v is False:
			v="false"
		if isinstance(v,list) or isinstance(v,dict):
			value_lst.append(v)
			continue
		for id,table_value in stream["table_dic"].items():
			table_comment = table_value.get("tableComment")
			table_name = table_value.get("tableName")
			if v == table_name or (name=="表id名称" and v ==id):
				# 如果值等于表名称，就将中文名称赋值为v
				v = table_comment
				value_lst.append(v)
				founds = True
				break
		# 循环值信息，如果值 存在与标签信息中
		if v in label_info_dict and not founds:#如果值存在于字典之中，那么这个字典中的值是列表，就需要将数据取出来
			label_value = label_info_dict.get(v,"") # 获取到标签的值
			if label_value:
				value_lst.append(label_value)
		else:
				# 如果不存在的话 就存入新的值
			value_lst.append(v)
	if value_lst:
		value_lst = remove_duplicates(value_lst)
		if value_lst!=[]:
			event.setdefault(name,value_lst)
	return event
}
remove_duplicates =>(mixed_array){
	
	result=[]
	for item in mixed_array:
		if item not in result and item!=[]:
			result.append(item)
	return result
}
table_common =>(url,response_body,table_dic){
	if url == "http://10.18.95.82:8000/hsdsh/original/getOriginalTable":
		response_body = ujson.loads(response_body)
		data = response_body.get("data",[])
		if data:
			for item in data:
				system = item.get("system","")
				tableName = item.get("tableName","")
				tableComment = item.get("tableComment","")
				id = str(item.get("id"))
				topics =item.get("topic","")
				table_dic.setdefault(id,{}).setdefault("topic",topics)
				table_dic.setdefault(id,{}).setdefault("tableName",tableName)
				table_dic.setdefault(id,{}).setdefault("tableComment",tableComment)
				table_dic.setdefault(id,{}).setdefault("system",system)
	return table_dic
}
#需要额外引入的包
imports =>{
	import sys
	import gc
	import base64
	#from model_information import *
	from intell_analy_new import *
	import pickle
	import os
	import time
}