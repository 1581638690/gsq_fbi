#LastModifyDate:　2024-03-31T12:47:59    Author:   lch
#LastModifyDate:　2024-03-31T12:38:37    Author:   lch
#LastModifyDate:　2024-03-25T09:34:03    Author:   rzc
#LastModifyDate:　2024-03-22T10:27:45    Author:   rzc
#LastModifyDate:　2024-03-22T09:31:15    Author:   rzc
#LastModifyDate:　2024-03-21T17:20:31    Author:   rzc
#xlink脚本
#file: intelldata_storage.xlk
#name: 存储智能化识别数据
#描述： 将经过规则识别后的信息进行存储
#创建时间: 2024-03-21T17:20:00.373531

#查看流计算服务
#a = @udf FBI.x_finder3_list

#启动
#a = @udf FBI.x_finder3_start with intelldata_storage

#停止
#a = @udf FBI.x_finder3_stop with intelldata_storage

#查询错误日志
#a = load ssdb by ssdb0 query qrange,X_log:intelldata_storage,0,1000

#查看xlink内部信息, 每５秒更新
#在对象查看器里输入　printf::intelldata_storage

#断点调试
#debug_on(1)


#初始化
init => {
	stream["meta_name"] = "存储智能化识别数据"
	stream["meta_desc"] = "将经过规则识别后的信息进行存储"
	a = load_ssdb_kv("setting")
	stream["redis_link"] = a["kfk"]["redis"]["addr_r"]
	stream["ckh_link"] = a["kfk"]["data"]["addr_c"]
	stream["source"]= {"unix_udp":"/tmp/storages"}
	
	stream["st"]["st_10s"]={"times":10,"fun":"print10"}

	#自定义的统计变量
	stream["count"] = 0
	stream["count-10"] = 0
	stream["CKH"] = CKH_Client(host=stream["ckh_link"],port=19000,user="default",password="client")
	pool["acc_storage"] =[]
}


#事件处理函数
events => {
	if "acc_key" not in stream:
		stream["acc_key"] = list(o.keys())
	o["time"] = iso_to_datetime(o["time"])
	o["request_headers"] = ujson.dumps(o["request_headers"],ensure_ascii=False)
	o["response_headers"] = ujson.dumps(o["response_headers"],ensure_ascii=False)
	o["account_info"] = ujson.dumps(o["account_info"],ensure_ascii=False)
	to_pool("acc_storage",list(o.values()))
}

#系统定时函数
print10 => {
	printf("总数","%s==sum==%d"%(st,stream["count"]))
	printf("10秒统计数","%s==10===%d"%(st,stream["count-10"]))
	stream["count-10"] = 0
	if "acc_key" in stream:
		store_ckh2(pool["acc_storage"],"account_table",stream["acc_key"])
}

#窗口函数，使用FBI的原语
flow => stw{

	df2 = group df by dest_ip agg count
	df3 = @udf df by udf0.df_sum
	store df2 to ssdb by ssdb0 with DF:agg=>@k
    store df3 to ssdb by ssdb0 with DF:sum=>@k    
    @udf flow by CRUD.save_table with (msyql,df)
	assert df by df.index.size >0 as xlink to 调度成功[df.index.size] with 调度失败!
}

#窗口函数，使用FBI的原语
http => stw{
	df2 = group df by dest_ip agg count
	df3 = @udf df by udf0.df_sum
	store df2 to ssdb by ssdb0 with DF:agg=>@k
    store df3 to ssdb by ssdb0 with DF:sum=>@k
	t2 = @sdf format_timestamp with (@k,"%Y-%m-%dT%H:%M:%S")
	#调试语句
	assert True as xlink to 调度成功[$t2] with 调度失败!
}

#自定义批处理函数，使用FBI语句块, 可以在系统定时函数中调用
#使用push_arrays_to_df函数生成df,在语句块中使用
#如: push_arrays_to_df(table,"flow")
save => fbi{
	#@udf flow by CRUD.save_table with (msyql,flow_info)
	drop flow
}

#自定义python函数，必须有参数,可以在初始化函数，事件处理函数，和定时函数中使用
ss => (d1,d2,d3){
	return d1+d2+d3
}


#克隆一个新事件,创建一个新的变量，并返回
clone_event =>(o){
	e={}
	e["timestamp"]= o["timestamp"]
	e["src_ip"]= o["src_ip"]
	e["dest_ip"]= o["dest_ip"]
	e["dest_port"]= o["dest_port"]
	return e
}

#base64字符串的解码,处理被截断的情况
base64_decode =>(x){
	try:
		a =  base64.b64decode(x).decode("utf-8")
	except Exception as e:
		a = base64.b64decode(x)[0:e.start].decode("utf-8")
	return a
}

#需要额外引入的包
imports =>{
	import sys
	import gc
	import base64
	import ujson
}
