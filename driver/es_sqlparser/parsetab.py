
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ANALYZER AND ASC AVG BETWEEN BINARY BOOLEAN BY BYTE COMMA COMPARISON COUNT CREATE DATE DELETE DESC DISTINCT DOUBLE DROP END ENGLISH FLOAT FROM GROUP HAVING IN INSERT INTEGER INTO IS KEYWORD LIKE LIMIT LONG MATCH MAX MIN NAME NOT NULL NUMBER OR ORDER SCAN SELECT SET SHORT SHOW STANDARD STRING SUM TABLE TABLES TEXT UPDATE VALUES WHERE WITH expression : dml END\n                       | ddl END\n                       | show END\n         dml : select\n                | scan\n                | insert\n                | update\n                | delete\n         ddl : create\n                | drop\n                | desc\n         show : SHOW TABLES LIKE item\n                 | SHOW TABLES\n         update : UPDATE string SET sets where\n         sets : NAME COMPARISON item\n                 | sets COMMA sets\n         insert : INSERT INTO string "(" items ")" VALUES values\n         values : "(" items ")"\n                   | values COMMA values\n         delete : DELETE FROM string where\n         scan : SCAN columns FROM tables where order_by size\n         size : LIMIT NUMBER\n                 | empty\n         select : SELECT columns FROM tables where group_by having order_by limit\n         tables : string\n                   | string COMMA tables\n         where : WHERE conditions\n                  | empty\n         group_by : GROUP BY columns\n                     | empty\n         having : HAVING having_conditions\n                   | empty\n         order_by : ORDER BY order\n                     | empty\n         limit : LIMIT numbers\n                  | empty\n         order : order COMMA order\n                  | string order_type\n         order_type : ASC\n                       | DESC\n                       | empty\n         columns : columns COMMA columns\n                    | column\n                    | DISTINCT columns\n                    | DISTINCT "(" columns ")"\n         column : group_functions "(" column ")"\n                   | group_functions "(" DISTINCT columns ")"\n                   | group_functions "(" DISTINCT "(" columns ")" ")"\n                   | item\n                   | item "." KEYWORD\n         items : items COMMA items\n                  | item\n         item : STRING\n                 | NAME\n                 | NUMBER\n                 | "*"\n         numbers : NUMBER COMMA NUMBER\n                    | NUMBER\n         string : NAME\n                   | STRING\n         conditions : conditions AND conditions\n                       | conditions OR conditions\n                       | "(" conditions ")"\n                       | compare\n         having_conditions : having_conditions AND having_conditions\n                              | having_conditions OR having_conditions\n                              | "(" having_conditions ")"\n                              | having_compare\n         match : MATCH "(" NAME COMMA item ")"\n                  | MATCH "(" NAME COMMA item COMMA string ")"\n         compare : NAME COMPARISON item\n                    | NAME BETWEEN item AND item\n                    | NAME LIKE item\n                    | NAME IN "(" items ")"\n                    | NAME NOT IN "(" items ")"\n                    | NAME IS NULL\n                    | NAME IS NOT NULL\n                    | match\n         having_compare : group_functions "(" item ")" COMPARISON NUMBER\n                           | group_functions "(" item ")" BETWEEN NUMBER AND NUMBER\n         group_functions : COUNT\n                            | SUM\n                            | AVG\n                            | MIN\n                            | MAX\n         create : CREATE TABLE string "(" create_columns ")" with\n         create_columns : create_columns COMMA create_columns\n                           | create_column\n         create_column : string column_type mapping_params\n         column_type : TEXT\n                        | KEYWORD\n                        | LONG\n                        | INTEGER\n                        | SHORT\n                        | BYTE\n                        | DOUBLE\n                        | FLOAT\n                        | DATE\n                        | BOOLEAN\n                        | BINARY\n                        | column_type "/" column_type\n         mapping_params : "{" params "}"\n                           | empty\n         params : params COMMA params\n                   | param\n         param : ANALYZER COMPARISON analyzers\n                  | empty\n         analyzers : STANDARD\n                      | ENGLISH\n         with : WITH numbers\n                 | empty\n         drop : DROP TABLE tables\n         desc : DESC string\n        empty :'
    
_lr_action_items = {'SHOW':([0,],[13,]),'SELECT':([0,],[14,]),'SCAN':([0,],[15,]),'INSERT':([0,],[16,]),'UPDATE':([0,],[17,]),'DELETE':([0,],[18,]),'CREATE':([0,],[19,]),'DROP':([0,],[20,]),'DESC':([0,43,44,175,],[21,-59,-60,200,]),'$end':([1,22,23,24,],[0,-1,-2,-3,]),'END':([2,3,4,5,6,7,8,9,10,11,12,25,27,30,36,37,38,39,43,44,48,52,59,61,62,63,64,65,69,70,72,74,76,79,80,81,84,87,90,92,94,99,100,102,104,105,107,110,111,134,136,138,141,143,147,148,149,150,152,155,162,164,166,167,169,171,172,173,174,175,177,181,188,189,190,192,198,199,200,201,204,205,212,213,214,215,217,218,219,220,222,227,232,233,236,],[22,23,24,-4,-5,-6,-7,-8,-9,-10,-11,-13,-43,-49,-53,-54,-55,-56,-59,-60,-113,-44,-114,-112,-25,-12,-114,-42,-50,-114,-114,-20,-28,-114,-45,-46,-114,-14,-27,-64,-78,-26,-114,-30,-47,-114,-34,-16,-15,-114,-114,-32,-21,-23,-61,-62,-63,-71,-73,-76,-86,-111,-114,-31,-68,-29,-48,-22,-33,-114,-17,-77,-110,-58,-24,-36,-38,-39,-40,-41,-72,-74,-35,-65,-66,-67,-37,-18,-19,-75,-69,-57,-70,-79,-80,]),'TABLES':([13,],[25,]),'DISTINCT':([14,15,28,51,53,54,68,82,139,],[28,28,28,28,28,68,28,28,28,]),'COUNT':([14,15,28,51,53,54,68,82,137,139,168,193,194,],[31,31,31,31,31,31,31,31,31,31,31,31,31,]),'SUM':([14,15,28,51,53,54,68,82,137,139,168,193,194,],[32,32,32,32,32,32,32,32,32,32,32,32,32,]),'AVG':([14,15,28,51,53,54,68,82,137,139,168,193,194,],[33,33,33,33,33,33,33,33,33,33,33,33,33,]),'MIN':([14,15,28,51,53,54,68,82,137,139,168,193,194,],[34,34,34,34,34,34,34,34,34,34,34,34,34,]),'MAX':([14,15,28,51,53,54,68,82,137,139,168,193,194,],[35,35,35,35,35,35,35,35,35,35,35,35,35,]),'STRING':([14,15,17,21,28,41,45,46,47,49,50,51,53,54,56,68,71,77,78,82,89,109,115,116,117,135,139,144,153,176,178,180,182,196,197,221,],[36,36,44,44,36,44,44,44,44,36,44,36,36,36,44,36,36,44,44,36,36,36,36,36,36,44,36,44,36,36,36,36,36,36,44,44,]),'NAME':([14,15,17,21,28,41,45,46,47,49,50,51,53,54,56,58,68,71,75,77,78,82,88,89,91,109,112,113,115,116,117,121,135,139,144,153,176,178,180,182,196,197,221,],[37,37,43,43,37,43,43,43,43,37,43,37,37,37,43,73,37,37,93,43,43,37,73,37,93,37,93,93,37,37,37,157,43,37,43,37,37,37,37,37,37,43,43,]),'NUMBER':([14,15,28,49,51,53,54,68,71,82,89,109,115,116,117,139,142,153,163,176,178,180,182,191,196,211,230,231,235,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,173,38,189,38,38,38,38,189,38,227,233,234,236,]),'*':([14,15,28,49,51,53,54,68,71,82,89,109,115,116,117,139,153,176,178,180,182,196,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'INTO':([16,],[41,]),'FROM':([18,26,27,30,36,37,38,39,40,52,65,69,80,81,104,172,],[45,50,-43,-49,-53,-54,-55,-56,56,-44,-42,-50,-45,-46,-47,-48,]),'TABLE':([19,20,],[46,47,]),'LIKE':([25,93,],[49,117,]),'COMMA':([26,27,30,36,37,38,39,40,43,44,52,62,65,66,69,72,80,81,83,85,86,97,98,103,104,110,111,122,123,124,125,126,127,128,129,130,131,132,133,146,157,158,160,161,165,171,172,174,175,177,179,183,184,185,187,189,198,199,200,201,202,206,207,208,209,217,218,219,223,224,225,226,],[51,-43,-49,-53,-54,-55,-56,51,-59,-60,51,78,51,51,-50,88,-45,-46,51,109,-52,135,-88,51,-47,88,-15,-114,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,109,182,-89,-114,-103,135,51,-48,197,-114,203,109,-101,209,-105,-107,211,-38,-39,-40,-41,109,109,221,-102,-114,197,-18,203,209,-106,-108,-109,]),')':([27,30,36,37,38,39,43,44,52,65,66,67,69,80,81,83,85,86,92,94,97,98,103,104,114,122,123,124,125,126,127,128,129,130,131,132,133,140,146,147,148,149,150,152,155,158,161,165,169,172,179,181,183,195,202,204,205,206,207,208,213,214,215,216,220,222,229,232,233,236,],[-43,-49,-53,-54,-55,-56,-59,-60,-44,-42,80,81,-50,-45,-46,104,108,-52,-64,-78,134,-88,140,-47,149,-114,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,172,-51,-61,-62,-63,-71,-73,-76,-89,-103,-87,-68,-48,205,-77,-101,215,218,-72,-74,220,222,-102,-65,-66,-67,228,-75,-69,232,-70,-79,-80,]),'HAVING':([27,30,36,37,38,39,43,44,52,62,64,65,69,76,79,80,81,90,92,94,99,100,102,104,147,148,149,150,152,155,171,172,181,204,205,220,222,232,],[-43,-49,-53,-54,-55,-56,-59,-60,-44,-25,-114,-42,-50,-28,-114,-45,-46,-27,-64,-78,-26,137,-30,-47,-61,-62,-63,-71,-73,-76,-29,-48,-77,-72,-74,-75,-69,-70,]),'ORDER':([27,30,36,37,38,39,43,44,52,62,64,65,69,70,76,79,80,81,84,90,92,94,99,100,102,104,136,138,147,148,149,150,152,155,167,169,171,172,181,204,205,213,214,215,220,222,232,233,236,],[-43,-49,-53,-54,-55,-56,-59,-60,-44,-25,-114,-42,-50,-114,-28,-114,-45,-46,106,-27,-64,-78,-26,-114,-30,-47,106,-32,-61,-62,-63,-71,-73,-76,-31,-68,-29,-48,-77,-72,-74,-65,-66,-67,-75,-69,-70,-79,-80,]),'LIMIT':([27,30,36,37,38,39,43,44,52,62,64,65,69,70,76,79,80,81,84,90,92,94,99,100,102,104,105,107,136,138,147,148,149,150,152,155,166,167,169,171,172,174,175,181,198,199,200,201,204,205,213,214,215,217,220,222,232,233,236,],[-43,-49,-53,-54,-55,-56,-59,-60,-44,-25,-114,-42,-50,-114,-28,-114,-45,-46,-114,-27,-64,-78,-26,-114,-30,-47,142,-34,-114,-32,-61,-62,-63,-71,-73,-76,191,-31,-68,-29,-48,-33,-114,-77,-38,-39,-40,-41,-72,-74,-65,-66,-67,-37,-75,-69,-70,-79,-80,]),'(':([28,29,31,32,33,34,35,43,44,57,60,68,75,91,95,112,113,118,137,145,154,168,170,193,194,203,],[53,54,-81,-82,-83,-84,-85,-59,-60,71,77,82,91,91,121,91,91,153,168,176,180,168,196,168,168,176,]),'.':([30,36,37,38,39,],[55,-53,-54,-55,-56,]),'WHERE':([36,37,38,39,43,44,59,62,64,70,72,99,110,111,],[-53,-54,-55,-56,-59,-60,75,-25,75,75,75,-26,-16,-15,]),'AND':([36,37,38,39,90,92,94,114,147,148,149,150,151,152,155,167,169,181,195,204,205,213,214,215,220,222,232,233,234,236,],[-53,-54,-55,-56,112,-64,-78,112,112,112,-63,-71,178,-73,-76,193,-68,-77,193,-72,-74,193,193,-67,-75,-69,-70,-79,235,-80,]),'OR':([36,37,38,39,90,92,94,114,147,148,149,150,152,155,167,169,181,195,204,205,213,214,215,220,222,232,233,236,],[-53,-54,-55,-56,113,-64,-78,113,113,113,-63,-71,-73,-76,194,-68,-77,194,-72,-74,194,194,-67,-75,-69,-70,-79,-80,]),'GROUP':([36,37,38,39,43,44,62,64,76,79,90,92,94,99,147,148,149,150,152,155,181,204,205,220,222,232,],[-53,-54,-55,-56,-59,-60,-25,-114,-28,101,-27,-64,-78,-26,-61,-62,-63,-71,-73,-76,-77,-72,-74,-75,-69,-70,]),'SET':([42,43,44,],[58,-59,-60,]),'TEXT':([43,44,96,159,],[-59,-60,123,123,]),'KEYWORD':([43,44,55,96,159,],[-59,-60,69,124,124,]),'LONG':([43,44,96,159,],[-59,-60,125,125,]),'INTEGER':([43,44,96,159,],[-59,-60,126,126,]),'SHORT':([43,44,96,159,],[-59,-60,127,127,]),'BYTE':([43,44,96,159,],[-59,-60,128,128,]),'DOUBLE':([43,44,96,159,],[-59,-60,129,129,]),'FLOAT':([43,44,96,159,],[-59,-60,130,130,]),'DATE':([43,44,96,159,],[-59,-60,131,131,]),'BOOLEAN':([43,44,96,159,],[-59,-60,132,132,]),'BINARY':([43,44,96,159,],[-59,-60,133,133,]),'ASC':([43,44,175,],[-59,-60,199,]),'COMPARISON':([73,93,186,228,],[89,115,210,230,]),'MATCH':([75,91,112,113,],[95,95,95,95,]),'BETWEEN':([93,228,],[116,231,]),'IN':([93,119,],[118,154,]),'NOT':([93,120,],[119,156,]),'IS':([93,],[120,]),'BY':([101,106,],[139,144,]),'VALUES':([108,],[145,]),'NULL':([120,156,],[155,181,]),'/':([122,123,124,125,126,127,128,129,130,131,132,133,183,],[159,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,159,]),'{':([122,123,124,125,126,127,128,129,130,131,132,133,183,],[160,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,]),'WITH':([134,],[163,]),'ANALYZER':([160,209,],[186,186,]),'}':([160,184,185,187,209,223,224,225,226,],[-114,208,-105,-107,-114,-104,-106,-108,-109,]),'STANDARD':([210,],[225,]),'ENGLISH':([210,],[226,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),'dml':([0,],[2,]),'ddl':([0,],[3,]),'show':([0,],[4,]),'select':([0,],[5,]),'scan':([0,],[6,]),'insert':([0,],[7,]),'update':([0,],[8,]),'delete':([0,],[9,]),'create':([0,],[10,]),'drop':([0,],[11,]),'desc':([0,],[12,]),'columns':([14,15,28,51,53,68,82,139,],[26,40,52,65,66,83,103,171,]),'column':([14,15,28,51,53,54,68,82,139,],[27,27,27,27,27,67,27,27,27,]),'group_functions':([14,15,28,51,53,54,68,82,137,139,168,193,194,],[29,29,29,29,29,29,29,29,170,29,170,170,170,]),'item':([14,15,28,49,51,53,54,68,71,82,89,109,115,116,117,139,153,176,178,180,182,196,],[30,30,30,63,30,30,30,30,86,30,111,86,150,151,152,30,86,86,204,86,207,216,]),'string':([17,21,41,45,46,47,50,56,77,78,135,144,197,221,],[42,48,57,59,60,62,62,62,96,62,96,175,175,229,]),'tables':([47,50,56,78,],[61,64,70,99,]),'sets':([58,88,],[72,110,]),'where':([59,64,70,72,],[74,79,84,87,]),'empty':([59,64,70,72,79,84,100,105,122,134,136,160,166,175,209,],[76,76,76,76,102,107,138,143,161,164,107,187,192,201,187,]),'items':([71,109,153,176,180,],[85,146,179,202,206,]),'conditions':([75,91,112,113,],[90,114,147,148,]),'compare':([75,91,112,113,],[92,92,92,92,]),'match':([75,91,112,113,],[94,94,94,94,]),'create_columns':([77,135,],[97,165,]),'create_column':([77,135,],[98,98,]),'group_by':([79,],[100,]),'order_by':([84,136,],[105,166,]),'column_type':([96,159,],[122,183,]),'having':([100,],[136,]),'size':([105,],[141,]),'mapping_params':([122,],[158,]),'with':([134,],[162,]),'having_conditions':([137,168,193,194,],[167,195,213,214,]),'having_compare':([137,168,193,194,],[169,169,169,169,]),'order':([144,197,],[174,217,]),'values':([145,203,],[177,219,]),'params':([160,209,],[184,223,]),'param':([160,209,],[185,185,]),'numbers':([163,191,],[188,212,]),'limit':([166,],[190,]),'order_type':([175,],[198,]),'analyzers':([210,],[224,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> dml END','expression',2,'p_expression','parser.py',27),
  ('expression -> ddl END','expression',2,'p_expression','parser.py',28),
  ('expression -> show END','expression',2,'p_expression','parser.py',29),
  ('dml -> select','dml',1,'p_dml','parser.py',34),
  ('dml -> scan','dml',1,'p_dml','parser.py',35),
  ('dml -> insert','dml',1,'p_dml','parser.py',36),
  ('dml -> update','dml',1,'p_dml','parser.py',37),
  ('dml -> delete','dml',1,'p_dml','parser.py',38),
  ('ddl -> create','ddl',1,'p_ddl','parser.py',43),
  ('ddl -> drop','ddl',1,'p_ddl','parser.py',44),
  ('ddl -> desc','ddl',1,'p_ddl','parser.py',45),
  ('show -> SHOW TABLES LIKE item','show',4,'p_show','parser.py',50),
  ('show -> SHOW TABLES','show',2,'p_show','parser.py',51),
  ('update -> UPDATE string SET sets where','update',5,'p_update','parser.py',66),
  ('sets -> NAME COMPARISON item','sets',3,'p_sets','parser.py',76),
  ('sets -> sets COMMA sets','sets',3,'p_sets','parser.py',77),
  ('insert -> INSERT INTO string ( items ) VALUES values','insert',8,'p_insert','parser.py',89),
  ('values -> ( items )','values',3,'p_values','parser.py',99),
  ('values -> values COMMA values','values',3,'p_values','parser.py',100),
  ('delete -> DELETE FROM string where','delete',4,'p_delete','parser.py',112),
  ('scan -> SCAN columns FROM tables where order_by size','scan',7,'p_scan','parser.py',124),
  ('size -> LIMIT NUMBER','size',2,'p_size','parser.py',136),
  ('size -> empty','size',1,'p_size','parser.py',137),
  ('select -> SELECT columns FROM tables where group_by having order_by limit','select',9,'p_select','parser.py',148),
  ('tables -> string','tables',1,'p_tables','parser.py',162),
  ('tables -> string COMMA tables','tables',3,'p_tables','parser.py',163),
  ('where -> WHERE conditions','where',2,'p_where','parser.py',171),
  ('where -> empty','where',1,'p_where','parser.py',172),
  ('group_by -> GROUP BY columns','group_by',3,'p_group_by','parser.py',179),
  ('group_by -> empty','group_by',1,'p_group_by','parser.py',180),
  ('having -> HAVING having_conditions','having',2,'p_having','parser.py',187),
  ('having -> empty','having',1,'p_having','parser.py',188),
  ('order_by -> ORDER BY order','order_by',3,'p_order_by','parser.py',195),
  ('order_by -> empty','order_by',1,'p_order_by','parser.py',196),
  ('limit -> LIMIT numbers','limit',2,'p_limit','parser.py',203),
  ('limit -> empty','limit',1,'p_limit','parser.py',204),
  ('order -> order COMMA order','order',3,'p_order','parser.py',211),
  ('order -> string order_type','order',2,'p_order','parser.py',212),
  ('order_type -> ASC','order_type',1,'p_order_type','parser.py',220),
  ('order_type -> DESC','order_type',1,'p_order_type','parser.py',221),
  ('order_type -> empty','order_type',1,'p_order_type','parser.py',222),
  ('columns -> columns COMMA columns','columns',3,'p_columns','parser.py',229),
  ('columns -> column','columns',1,'p_columns','parser.py',230),
  ('columns -> DISTINCT columns','columns',2,'p_columns','parser.py',231),
  ('columns -> DISTINCT ( columns )','columns',4,'p_columns','parser.py',232),
  ('column -> group_functions ( column )','column',4,'p_column','parser.py',244),
  ('column -> group_functions ( DISTINCT columns )','column',5,'p_column','parser.py',245),
  ('column -> group_functions ( DISTINCT ( columns ) )','column',7,'p_column','parser.py',246),
  ('column -> item','column',1,'p_column','parser.py',247),
  ('column -> item . KEYWORD','column',3,'p_column','parser.py',248),
  ('items -> items COMMA items','items',3,'p_items','parser.py',262),
  ('items -> item','items',1,'p_items','parser.py',263),
  ('item -> STRING','item',1,'p_item','parser.py',271),
  ('item -> NAME','item',1,'p_item','parser.py',272),
  ('item -> NUMBER','item',1,'p_item','parser.py',273),
  ('item -> *','item',1,'p_item','parser.py',274),
  ('numbers -> NUMBER COMMA NUMBER','numbers',3,'p_numbers','parser.py',280),
  ('numbers -> NUMBER','numbers',1,'p_numbers','parser.py',281),
  ('string -> NAME','string',1,'p_string','parser.py',289),
  ('string -> STRING','string',1,'p_string','parser.py',290),
  ('conditions -> conditions AND conditions','conditions',3,'p_conditions','parser.py',295),
  ('conditions -> conditions OR conditions','conditions',3,'p_conditions','parser.py',296),
  ('conditions -> ( conditions )','conditions',3,'p_conditions','parser.py',297),
  ('conditions -> compare','conditions',1,'p_conditions','parser.py',298),
  ('having_conditions -> having_conditions AND having_conditions','having_conditions',3,'p_having_conditions','parser.py',309),
  ('having_conditions -> having_conditions OR having_conditions','having_conditions',3,'p_having_conditions','parser.py',310),
  ('having_conditions -> ( having_conditions )','having_conditions',3,'p_having_conditions','parser.py',311),
  ('having_conditions -> having_compare','having_conditions',1,'p_having_conditions','parser.py',312),
  ('match -> MATCH ( NAME COMMA item )','match',6,'p_match','parser.py',323),
  ('match -> MATCH ( NAME COMMA item COMMA string )','match',8,'p_match','parser.py',324),
  ('compare -> NAME COMPARISON item','compare',3,'p_compare','parser.py',332),
  ('compare -> NAME BETWEEN item AND item','compare',5,'p_compare','parser.py',333),
  ('compare -> NAME LIKE item','compare',3,'p_compare','parser.py',334),
  ('compare -> NAME IN ( items )','compare',5,'p_compare','parser.py',335),
  ('compare -> NAME NOT IN ( items )','compare',6,'p_compare','parser.py',336),
  ('compare -> NAME IS NULL','compare',3,'p_compare','parser.py',337),
  ('compare -> NAME IS NOT NULL','compare',4,'p_compare','parser.py',338),
  ('compare -> match','compare',1,'p_compare','parser.py',339),
  ('having_compare -> group_functions ( item ) COMPARISON NUMBER','having_compare',6,'p_having_compare','parser.py',358),
  ('having_compare -> group_functions ( item ) BETWEEN NUMBER AND NUMBER','having_compare',8,'p_having_compare','parser.py',359),
  ('group_functions -> COUNT','group_functions',1,'p_group_functions','parser.py',367),
  ('group_functions -> SUM','group_functions',1,'p_group_functions','parser.py',368),
  ('group_functions -> AVG','group_functions',1,'p_group_functions','parser.py',369),
  ('group_functions -> MIN','group_functions',1,'p_group_functions','parser.py',370),
  ('group_functions -> MAX','group_functions',1,'p_group_functions','parser.py',371),
  ('create -> CREATE TABLE string ( create_columns ) with','create',7,'p_create','parser.py',379),
  ('create_columns -> create_columns COMMA create_columns','create_columns',3,'p_create_columns','parser.py',389),
  ('create_columns -> create_column','create_columns',1,'p_create_columns','parser.py',390),
  ('create_column -> string column_type mapping_params','create_column',3,'p_create_column','parser.py',398),
  ('column_type -> TEXT','column_type',1,'p_column_type','parser.py',403),
  ('column_type -> KEYWORD','column_type',1,'p_column_type','parser.py',404),
  ('column_type -> LONG','column_type',1,'p_column_type','parser.py',405),
  ('column_type -> INTEGER','column_type',1,'p_column_type','parser.py',406),
  ('column_type -> SHORT','column_type',1,'p_column_type','parser.py',407),
  ('column_type -> BYTE','column_type',1,'p_column_type','parser.py',408),
  ('column_type -> DOUBLE','column_type',1,'p_column_type','parser.py',409),
  ('column_type -> FLOAT','column_type',1,'p_column_type','parser.py',410),
  ('column_type -> DATE','column_type',1,'p_column_type','parser.py',411),
  ('column_type -> BOOLEAN','column_type',1,'p_column_type','parser.py',412),
  ('column_type -> BINARY','column_type',1,'p_column_type','parser.py',413),
  ('column_type -> column_type / column_type','column_type',3,'p_column_type','parser.py',414),
  ('mapping_params -> { params }','mapping_params',3,'p_mapping_params','parser.py',422),
  ('mapping_params -> empty','mapping_params',1,'p_mapping_params','parser.py',423),
  ('params -> params COMMA params','params',3,'p_params','parser.py',431),
  ('params -> param','params',1,'p_params','parser.py',432),
  ('param -> ANALYZER COMPARISON analyzers','param',3,'p_param','parser.py',440),
  ('param -> empty','param',1,'p_param','parser.py',441),
  ('analyzers -> STANDARD','analyzers',1,'p_analyzers','parser.py',449),
  ('analyzers -> ENGLISH','analyzers',1,'p_analyzers','parser.py',450),
  ('with -> WITH numbers','with',2,'p_with','parser.py',455),
  ('with -> empty','with',1,'p_with','parser.py',456),
  ('drop -> DROP TABLE tables','drop',3,'p_drop','parser.py',467),
  ('desc -> DESC string','desc',2,'p_desc','parser.py',478),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',488),
]
